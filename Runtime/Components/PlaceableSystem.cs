using NaughtyAttributes;
using System;
using System.Collections.Generic;
using UnityEngine;

namespace Readymade.Building.Components
{
    /// <summary>
    /// Tracks instances of <see cref="Placeable"/> objects and provides events for observing their lifecycle. Useful for discovering
    /// gameplay progress and synthesizing game events. This system does not provide any functionality for placing objects.
    /// </summary>
    /// <seealso cref="Placeable"/>
    /// <seealso cref="Builder"/>
    public sealed class PlaceableSystem : MonoBehaviour
    {
        private readonly HashSet<Placeable> _anyState = new();
        private readonly HashSet<Placeable> _placed = new();

        [InfoBox(
            "Use this system to track all Placeable instances in the scene. Useful for discovering gameplay progress and " +
            "synthesizing game events. For the system to work it must be added to the Service Locator. Note that the events" +
            " generated by this component also include placements that do not originate from a " + nameof(Builder) +
            " component, as such the events here are a superset to any events created by a " + nameof(Builder) + ".")]
        [Tooltip("Called whenever a Placeable object is placed in a valid location.")]
        [SerializeField]
        private PlaceableUnityEvent onPlaced;

        [Tooltip("Called whenever a placeable object is destroyed or otherwise unregistered.")]
        [SerializeField]
        private PlaceableUnityEvent onRemoved;

        /// <summary>
        /// Called whenever a <see cref="Placeable"/> is instantiated. This includes ghost instances that are not validated yet. Consider using <see cref="Placed"/> instead.
        /// </summary>
        public event Action<Placeable> Added;

        /// <summary>
        /// Called whenever a <see cref="Placeable"/> is spawned and placed in a valid position.
        /// </summary>
        public event Action<Placeable> Placed;

        /// <summary>
        /// Called whenever a <see cref="Placeable"/> is unregistered. Note that this event will be called when a placeable
        /// is destroyed to the argument may be null or point to an invalid object.
        /// </summary>
        public event Action<Placeable> Removed;

        /// <summary>
        /// All <see cref="Placeable"/> instances that have had <see cref="Placeable.OnPlaced"/> called. This excludes <see cref="Placeable"/> instances that are still in ghost-mode while being placed.
        /// </summary>
        public ISet<Placeable> PlacedInstances => _placed;

        /// <summary>
        /// Un-Register a <see cref="Placeable"/> from this system. Called by <see cref="Placeable"/>.
        /// </summary>
        /// <param name="placeable"></param>
        internal void Unregister(Placeable placeable)
        {
            _placed.Remove(placeable);
            if (_anyState.Remove(placeable))
            {
                Removed?.Invoke(placeable);
                onRemoved.Invoke(placeable);
            }
        }

        /// <summary>
        /// Register a <see cref="Placeable"/> with this system. Called by <see cref="Placeable"/>.
        /// </summary>
        /// <param name="placeable"></param>
        internal void Register(Placeable placeable)
        {
            if (_anyState.Add(placeable))
            {
                Added?.Invoke(placeable);
            }
        }

        /// <summary>
        /// Called by a placeable in <see cref="Placeable.OnPlaced"/>.
        /// </summary>
        /// <param name="placeable"></param>
        internal void SetPlaced(Placeable placeable)
        {
            if (_placed.Add(placeable))
            {
                Placed?.Invoke(placeable);
                onPlaced.Invoke(placeable);
            }
        }
    }
}